/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ece651.sp22.grp8.risk.server;

import ece651.sp22.grp8.risk.GamePrompt;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.HashMap;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class ServerApp {
    private int port;
    private ServerSocket serverSocket;
    ThreadPoolExecutor threadPool;
    private final BufferedReader inputReader;
    private final PrintStream out;
    private final GamePool gamePool;
    private final MyDatabase myDatabase= new MyDatabase();
    private final HashMap<Long,Game> games;

    ServerApp(int port, BufferedReader inputReader, PrintStream out) throws IOException {
        this.port = port;
        this.serverSocket = new ServerSocket(port);
        this.inputReader = inputReader;
        this.gamePool = new GamePool();
        this.out = out;
        this.games = new HashMap<>();
        BlockingQueue<Runnable> workQueue = new LinkedBlockingQueue<Runnable>(32);
        this.threadPool = new ThreadPoolExecutor(16, 16, 5, TimeUnit.SECONDS, workQueue);
        this.serverSocket.setSoTimeout(1000);
    }

    public static void main(String[] args) {
        try {
            BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
            ServerApp app = new ServerApp(GamePrompt.PORT,input,System.out);
            app.start();
        } catch (IOException e){
            System.out.print("Server closed!\n");
            System.out.print(e+"\n");
        }
    }

    public void start() {
        System.out.print("Starting the server at : "+ serverSocket.getInetAddress()+":" +port+"\n");
        while(!Thread.currentThread().isInterrupted()){
            final Socket client = acceptOrNull();
            if (client == null) {
                continue;
            }
            // This will enqueue the request until
            // a thread in the pool is available, then
            // execute that request on the available thread.
            threadPool.execute(new Runnable() {
                @Override
                public void run() {
                    try {
                        try {
                            System.out.print("The following client has connected: " + client.getInetAddress().getCanonicalHostName()+"\n");
                            ClientHandler clientHandler = new ClientHandler(client,inputReader,out, gamePool,myDatabase);
                            clientHandler.run();
                        } finally {
                            client.close();
                        }
                    } catch (IOException ioe) {
                        // in something real, we would want to handle
                        // this better... but for this, there isn't much we can or
                        // really want to do.
                    }
                }
            });
        }
    }

    /**
     * This is a helper method to accept a socket from the ServerSocket
     * or return null if it timesout.
     * This function is from factorserver project.
     */
    private Socket acceptOrNull() {
        try {
            return this.serverSocket.accept();
        } catch (IOException ioe) {
            // In real code, we would want to be more discriminating here.
            // Was this a timeout, or some other problem?
            return null;
        }
    }

}
